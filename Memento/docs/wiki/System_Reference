= System Reference =

This document aims to describe the processes and abstractions featured in the
software system to a sufficient level of detail to facilitate understanding
and future work.

<<TableOfContents(2,3)>>

== Programs and Modules ==

The following programs are provided in this system:

|| '''Program'''        || '''Purpose'''                                    ||
|| `build.py`           || [[#Building the Database|Builds the database]]   ||
|| `explore.py`         || [[Data Exploration|Explores exported data]]      ||
|| `exploremovement.py` || Explores data using motion sensor inputs         ||
|| `export.py`          || [[#Exporting the Data|Selects and exports data]] ||
|| `test_movement.py`   || Permits testing of `exploremovement.py`          ||

The following modules are provided in this system:

|| '''Module'''   || '''Purpose'''                                          ||
|| `analysis`     || Provides text/linguistic analysis functions            ||
|| `graph`        || Writes graph output for the Graphviz tool              ||
|| `grouping`     || Permits the grouping of words into compound terms      ||
|| `inputs`       || Input data handling                                    ||
|| `objects`      || Common data processing abstractions                    ||
|| `outputs`      || Output data handling                                   ||
|| `related`      || Selection of related fragments                         ||
|| `serialised`   || Serialised/stored data handling                        ||
|| `stats`        || Statistics production                                  ||
|| `stopwords`    || Word selection and filtering                           ||
|| `test_support` || Support for [[Testing|testing]]                        ||
|| `text`         || Elementary text processing support                     ||
|| `utils`        || Common utilities                                       ||
|| `vectors`      || Term vector computation                                ||
|| `wordlist`     || Dictionary-based selection and filtering               ||

Module filenames end with `.py` but are shown above in their program source
code form.

== Program Flow ==

The general flow of execution when the different programs are run is described
below. As noted in the [[Getting Started]] document, there are three main
activities:

 1. [[Getting Started#Building the Database|Building the database]] to be used
    for further processing.
 1. [[Getting Started#Selecting and Exporting Data|Selecting and exporting
    data]] for review and further use.
 1. [[Data Exploration|Exploring the exported data]].

=== Building the Database ===

The `build.py` program contains a number of principal functions that perform
the general processing workflow. These are described in more detail below.

{{{{#!table

######## A diagram showing the build activities.

{{{#!graphviz
#format svg
#transform notugly
digraph build {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  filenames [shape=folder,style=filled,fillcolor=cyan];
  config [shape=folder,style=filled,fillcolor=cyan];
  out [shape=folder,style=filled,fillcolor=cyan];
  fragments [shape=folder,style=filled,fillcolor=cyan];
  connections [shape=folder,style=filled,fillcolor=cyan];

  filenames -> process_input_data;
  config -> process_input_data;
  process_input_data -> fragments;
  process_input_data -> out;

  fragments -> process_fragment_data;
  config -> process_fragment_data;
  process_fragment_data -> connections;
  process_fragment_data -> out;

  out -> emit_basic_output;
  out -> emit_verbose_output;
}
}}}

########

||<^>

Here, the `filenames` indicate the locations of input data to be consumed by
the program. Together with `config` - the configuration of the program
influenced by the command options presented to the program - the `fragments`
and `connections` are produced by running the `process_input_data` and
`process_fragment_data` functions in turn.

The `out` object is also populated by these functions, collecting fragment and
connection information together with other details about the input data. This
object is employed by the `emit_basic_output` function to produce the
essential data for further processing and by the `emit_verbose_output`
function to produce data for inspection and review.

}}}}

The `process_input_data` function is concerned with obtaining the input data,
reading and identifying fragments encoded within it, and performing initial
processing on the fragment data.

######## A diagram showing input data processing.

{{{#!graphviz
#format svg
#transform notugly
digraph process_input_data {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  fragments [shape=folder,style=filled,fillcolor=cyan];

  get_fragments_from_files -> fragments;
  fragments -> process_fragments -> process_fragment_tokens;

  process_fragments -> normalise_accents;
  process_fragments -> remove_punctuation_from_words;
  process_fragments -> group_words;
  process_fragments -> filter_words;

  process_fragment_tokens -> stem_word;
  process_fragment_tokens -> lower_word;
}
}}}

########

The `process_fragment_data` function is concerned with making it possible and
efficient to compare fragments and to build connections.

######## A diagram showing the fragment data processing.

{{{#!graphviz
#format svg
#transform notugly
digraph process_fragment_data {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  fragments [shape=folder,style=filled,fillcolor=cyan];
  fragment_terms [shape=folder,style=filled,fillcolor=cyan];
  common_terms [shape=folder,style=filled,fillcolor=cyan];
  connections [shape=folder,style=filled,fillcolor=cyan];

  fragments -> process_term_vectors -> fragments;
  fragments -> get_fragment_terms -> fragment_terms;
  fragment_terms -> get_common_terms -> common_terms;

  fragments -> compare_fragments;
  common_terms -> compare_fragments;

  compare_fragments -> connections;
}
}}}

########

The `compare_fragments` function is worth exploring in more detail.

{{{{#!table

######## A diagram showing the fragment comparison activity.

{{{#!graphviz
#format svg
#transform notugly
digraph process_fragment_data {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  fragments [shape=folder,style=filled,fillcolor=cyan];
  pair [shape=folder,style=filled,fillcolor=cyan];
  vectors [shape=folder,style=filled,fillcolor=cyan];
  similarity [shape=folder,style=filled,fillcolor=cyan];
  connection [shape=folder,style=filled,fillcolor=cyan];

  fragments -> get_fragment_pairs -> pair;
  pair -> get_fragment_similarity -> get_term_vectors -> vectors;
  vectors -> combine_term_vectors -> similarity;
  similarity -> connection;
  pair -> connection;
}
}}}

########

||<^>

The `fragments` should already retain term vector information (initialised
previously by the `process_term_vectors` function). The `get_fragment_pairs`
function finds pairs of fragments for comparison, and these pairs are
presented to the `get_fragment_similarity` function which employs the
`get_term_vectors` function to obtain a collection of the term vectors for the
pair of fragments.

The term vectors for the pair are then combined using the
`combine_term_vectors` function (provided in the `vectors` module), producing
a combined similarity for the pair. The similarity and pair details are then
used to instantiate a [[#Connection|connection]] relating the two fragments.

}}}}

The `emit_basic_output` and `emit_verbose_output` functions are concerned with
writing the processed data out to the [[Output Data|output data]] directory.

=== Exporting the Data ===

The `export.py` program contains several functions for accessing the prepared
database, selecting data, and exporting this data as output. These functions
are described below.

{{{{#!table

######## A diagram showing the build activities.

{{{#!graphviz
#format svg
#transform notugly
digraph export {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  config [shape=folder,style=filled,fillcolor=cyan];
  out [shape=folder,style=filled,fillcolor=cyan];
  fragments [shape=folder,style=filled,fillcolor=cyan];
  connections [shape=folder,style=filled,fillcolor=cyan];

  restore_fragments -> get_serialised_fragments -> fragments;
  restore_fragments -> out;

  fragments -> restore_connections;
  config -> restore_connections;
  restore_connections -> connections -> out;

  fragments -> process_wordlist;
  process_wordlist -> fragments;
  process_wordlist -> out;

  fragments -> process_statistics;
  process_statistics -> out;

  connections -> process_relations;
  config -> process_relations;
  process_relations -> out;

  fragments -> process_accessibility;
  process_accessibility -> out;

  out -> emit_filtered_output;
  out -> emit_relation_output;
  out -> emit_statistics_output;
  out -> emit_graph_output;
}
}}}

########

||<^>

First of all, the `restore_fragments` function reads the stored fragments
using the `get_serialised_fragments` function (defined in the `serialised`
module). These fragments are recorded in the `out` [[#Output|repository
object]].

The terms in the stored fragments may be filtered according to a word list.
The `process_wordlist` function performs this task, and the fragments are
updated as a consequence.

The fragments are then used to recreate the connections using the
`restore_connections` function described in more detail below. The
connections are also recorded in the `out` object for convenience.

The `process_relations` function performs the selection of related fragments
for export according to the [[Getting Started#Related Fragment Selection|
selection criteria]].

Additional statistical information can be generated using the
`process_statistics` function.

}}}}

The `restore_connections` function is worth exploring in more detail:

{{{{#!table

######## A diagram showing the build activities.

{{{#!graphviz
#format svg
#transform notugly
digraph export {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  fragments [shape=folder,style=filled,fillcolor=cyan];
  connections [shape=folder,style=filled,fillcolor=cyan];

  fragments -> process_term_vectors -> fragments;

  fragments -> get_serialised_connections -> connections;
  connections -> recompute_connections -> connections;
}
}}}

########

||<^>

The `restore_connections` function takes the fragments as input, employing the
`get_serialised_connections` function to read the stored connection details
and to produce [[#Connection|connection objects]].

For the connections to be restored, sufficient information must be defined for
each fragment, and the term vectors are computed again using the
`process_term_vectors` function, since such information is not stored for
fragments by the build activity.

The `recompute_connections` function is then used to recompute the similarity
information for each connection, since such information is also not stored by
the build activity. It may also be the case that word filtering changes the
term vectors, meaning that if any similarity information were stored, it would
be obsolete due to such changes.

}}}}

== Principal Abstractions ==

The principal classes used for representing data are described below. They
each inherit from the `Comparable` class in order to support comparisons
between instances and ordering.

=== Category ===

 Source file:: `objects.py`

Instances of the `Category` class encapsulate the details of categories to
which fragments may be assigned. These details are as follows:

 `parent`:: The parent category label.
 `category`:: The specific category or subcategory label.

Employing a class instead of a tuple or a combined string for the category
information permits some flexibility in terms of how category values may be
handled.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph category {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Comparable [href="#Comparable"]; }

  Category [href="#Category"];

  Category -> Comparable [arrowhead=empty];
}
}}}

########

Instances of `Category` inherit from `Comparable`.

=== Comparable ===

 Source file:: `utils.py`

The `Comparable` class supports the special comparison methods needed to
compare instances with each other. However, it delegates the actual
comparison, converting the operands using any `to_operand` method provided by
the class or any descendant classes, presenting these operands to the generic
comparison operators.

Thus, all classes inheriting from `Comparable` provide their own `to_operand`
method returning the comparable form of their own instances. These comparable
forms are instances of other types (strings, tuples, numbers, and so on) for
which the means of comparison are already well established.

Note that no real support is provided for comparing instances of different
types or classes in this arrangement. Thus, it does not make sense to attempt
to compare, say, connections with fragments.

=== Connection ===

 Source file:: `objects.py`

Instances of the `Connection` class encapsulate details of relationships
between fragments, where each connection involves precisely two fragments.
Thus, the details of a connection instance are as follows:

 `similarity`:: The computed similarity of two fragments.
 `fragments`:: A collection of involved [[#Fragment|fragments]].

Connection instances are created when performing comparisons between fragments
in the `compare_fragments` function. The similarity is provided in the form of
a combined term vector indicating the common terms between the two fragments
and their combined weights. For example:

{{{
{"ganso" : 2.4, "pollo" : 3.25}
}}}

See the [[Data Processing]] document for more information on term vectors.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph connection {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Comparable [href="#Comparable"]; }

  subgraph {
    rank=same;
    Connection [href="#Connection"];
    Fragment [href="#Fragment"];
  }

  Connection -> Comparable [arrowhead=empty];

  Connection -> Fragment;
}
}}}

########

Instances of `Connection` inherit from `Comparable` and reference `Fragment`
instances.

=== Fragment ===

 Source file:: `objects.py`

Instances of the `Fragment` class encapsulate the details of a textual
fragment associated with part of a larger body of text, itself originating
from an audio recording. The details of the fragment are as follows:

 `source`:: The [[#Source|source]] or origin of the fragment.
 `category`:: The [[#Category|category]] to which the fragment is assigned.
 `words`:: The words or [[#Term|terms]] featured in the fragment.

Since the words or terms of a fragment are provided upon instantiation as a
collection of `Term` instances, a conventional representation of a single text
string is not automatically defined for a fragment. Such a representation is
defined later using the `commit_text` method.

Of importance in establishing [[#Connection|connections]] between fragments is
the definition of term vectors for fragments. These can be generated using the
`get_term_vector` method and, after any scaling, made permanent using the
`set_term_vector` method.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph fragment {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Comparable [href="#Comparable"]; }

  subgraph {
    rank=same;
    Fragment [href="#Fragment"];
    Category [href="#Category"];
    Source [href="#Source"];
    Term [href="#Term"];
  }

  Fragment -> Comparable [arrowhead=empty];

  Fragment -> Category;
  Fragment -> Source;
  Fragment -> Term;
}
}}}

########

Instances of `Fragment` inherit from `Comparable` and reference `Category`,
`Source` and `Term` instances.

=== Source ===

 Source file:: `objects.py`

Instances of the `Source` class describe the origins of [[#Fragment|
fragments]]. The following details are retained by each instance:

 `filename`:: The name of the file providing the fragment.
 `start`:: The start time of the fragment in the larger body of text.
 `end`:: The end time of the fragment in the larger body of text.

Start and end times are held as floating point values.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph source {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Comparable [href="#Comparable"]; }

  Source [href="#Source"];

  Source -> Comparable [arrowhead=empty];
}
}}}

########

Instances of `Source` inherit from `Comparable`.

=== Term ===

 Source file:: `objects.py`

Instances of the `Term` class represent words or groups of words in a larger
body of text. Although string instances could be used for such purposes,
additional information can be usefully associated with terms to facilitate
processing. Thus, the following details are retained by `Term` instances:

 `word`:: The actual word appearing in the text.
 `tag`:: Any part-of-speech tag associated with the word.
 `normalised`:: The normalised form (lemma) associated with the word.

The introduction of part-of-speech tags and normalised forms is done by the
part-of-speech tagging and stemming activities. By tagging words, their role
in sentences can be identified, and certain kinds of words (nouns, verbs,
adjectives) can be preserved whilst others (articles, pronouns, prepositions)
are discarded. By employing a normalised form for words, the presence of the
same fundamental word can be more easily determined in fragments.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph term {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Comparable [href="#Comparable"]; }

  Term [href="#Term"];

  Term -> Comparable [arrowhead=empty];
}
}}}

########

Instances of `Term` inherit from `Comparable`.

== Explorer Classes ==

The [[Data Exploration]] programs employ classes for the navigation of the
data and for handling interaction with the user.

=== Explorer ===

 Source file:: `explore.py`

The `Explorer` class provides a basis for navigating [[Output Data|exported
structured data]], with subclasses of `Explorer` providing specific mechanisms
and interfaces. The following details are employed when initialising an
instance of this class:

 `datadir`:: The location of an [[Output Data|output data]] directory.
 `out`:: An output stream (such as `sys.stdout`) used to communicate
         navigational information.

An instance of this class maintains the following state:

 `fragment`::       The currently selected fragment.
 `step`::           The number of steps taken in the forward direction through
                    related fragments.
 `left_rotation`::  The amount of rotation taken leftwards through related
                    fragments.
 `right_rotation`:: The amount of rotation taken rightwards through related
                    fragments.

The currently selected `fragment` is used to indicate a fragment that has been
selected as the basis of subsequent navigation. Choosing to stop on a fragment
or changing the direction of rotation causes a fragment to be selected as the
current fragment. Stepping forward across related fragments to the final one
defined will also cause this final fragment to be selected as the current
fragment.

Augmenting the current fragment are details of the number of steps taken
forward through fragments related to the current fragment (`step`), and any
amount of rotation performed in leftward or rightward directions
(`left_rotation` and `right_rotation`). These details permit exploration of
the related fragments defined in the output data for the current fragment.

`Explorer` instances are controlled using the following principal operations:

 `forward`:: Move forward, stepping across related fragments.
 `rotate`::  Rotate in the indicated direction (a negative number signifying
             left, a positive number signifying right).
 `stop`::    Stop and select the currently viewed related fragment as the
             current fragment.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph explorer {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Explorer; }

  AudioExplorer [href="#AudioExplorer"];
  TextExplorer [href="#TextExplorer"];

  AudioExplorer -> Explorer [arrowhead=empty];
  TextExplorer -> Explorer [arrowhead=empty];
}
}}}

########

`AudioExplorer` and `TextExplorer` both inherit from `Explorer`.

=== Prompter ===

 Source file:: `explore.py`

The `Prompter` class provides the basis for interaction between a user and the
[[#Explorer|explorer]] mechanism used to navigate the [[Output Data|output
data]].

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph prompter {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; Prompter; }

  MotionPrompter [href="#MotionPrompter"];
  TextPrompter [href="#TextPrompter"];

  subgraph {
    rank=max;
    RestrictedTextPrompter [href="#RestrictedTextPrompter"];
  }

  MotionPrompter -> Prompter [arrowhead=empty];
  TextPrompter -> Prompter [arrowhead=empty];
  RestrictedTextPrompter -> TextPrompter [arrowhead=empty];
}
}}}

########

`MotionPrompter`, `TextPrompter` and `RestrictedTextPrompter` all inherit from
`Prompter`.

=== MotionTester ===

 Source file:: `test_movement.py`

Separate to the other explorer-related classes, an instance of the
`MotionTester` class acts as a producer and a conduit for simulated sensor
data requested by an accompanying `RestrictedTextPrompter` instance. To
achieve this, it takes the role of an explorer instance, supporting the
`forward` and `rotate` operations, translating them into network messages
understood by the `MotionPrompter` class.

With a `MotionPrompter` instance listening for suitable network messages,
those sent by the `MotionTester` can be used to drive the `MotionPrompter` and
thus the explorer instance to which it is connected (such as an instance of
`AudioExplorer`).

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph motiontester {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];
  rankdir=LR;

  RestrictedTextPrompter [href="#RestrictedTextPrompter"];
  MotionTester [href="#MotionTester"];
  MotionPrompter [href="#MotionTester"];
  AudioExplorer [href="#MotionTester"];

  RestrictedTextPrompter -> MotionTester;
  MotionTester -> MotionPrompter [arrowhead=none,style=dashed];
  MotionPrompter -> AudioExplorer;
}
}}}

########

`MotionTester` effectively combines with `MotionPrompter` to allow a
`RestrictedTextPrompter` to drive an `AudioExplorer` or other explorer
instance.

== Peripheral and Utility Classes ==

=== CountingDict ===

 Source file:: `utils.py`

A `CountingDict` instance is merely a dictionary that maintains a count for
each key defined for the dictionary. It can be considered as a set whose
members each have a count or total associated with them.

######## A diagram showing the class's relationships.

{{{#!graphviz
#format svg
#transform notugly
digraph countingdict {
  graph [splines=ortho];
  node [shape=box,fontsize="13.0",fontname="Helvetica"];

  subgraph { rank=min; defaultdict; }

  CountingDict [href="#CountingDict"];

  CountingDict -> defaultdict [arrowhead=empty];
}
}}}

########

`CountingDict` inherits from `defaultdict` (found in the Python standard
library).

=== Output ===

 Source file:: `outputs.py`

The `Output` class is instantiated to provide a repository for output
artefacts, employing a designated output directory within which these
artefacts may eventually be written. The following details are used to
initialise instances of this class:

 `outdir`:: The output directory employed by the instance.

Instances of `Output` are employed in the different `emit` functions of the
`build.py` and `export.py` programs, as well as in the `outputs` module.

=== POSFilter ===

 Source file:: `stopwords.py`

The `POSFilter` class can be instantiated to provide a means of selecting or
preserving terms having a particular part-of-speech (POS) tag in a collecion
of terms. It may be instantiated using the following details:

 `tags`:: A collection of strings corresponding to tag symbols.

If `tags` is omitted (or given as `None`), a default collection of generally
helpful tags is employed for filtering by the `filter_words` method.

=== Wordlist ===

 Source file:: `wordlist.py`

The `Wordlist` class can be instantiated to provide a means of selecting or
preserving specific words in a collection of terms. It may be instantiated
using the following details:

 `words`:: A collection of words to preserve.

The `get_wordlist_from_file` function also found in the `wordlist` module can
be used to create a `Wordlist` instance populated with the words found in the
file (one word per line). The `filter_words` method will then filter out all
terms in a collection not found in the list of words.
